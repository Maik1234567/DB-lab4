"""
2022
apavelchak@gmail.com
Â© Andrii Pavelchak
"""

import os
import re
from datetime import datetime, timedelta
from http import HTTPStatus
import secrets
import jwt
from typing import Dict, Any
from functools import wraps
from urllib.parse import quote_plus

from dotenv import load_dotenv
from flasgger import Swagger
from flask import Flask, jsonify, request, g
from flask_restx import Api, Resource, fields
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy import text
from sqlalchemy_utils import database_exists, create_database
from apispec import APISpec
from apispec_webframeworks.flask import FlaskPlugin
from flask_swagger_ui import get_swaggerui_blueprint
from flask_cors import CORS
from werkzeug.security import generate_password_hash, check_password_hash

from my_project.auth.route import register_routes

SECRET_KEY = "SECRET_KEY"
SQLALCHEMY_DATABASE_URI = "SQLALCHEMY_DATABASE_URI"
MYSQL_ROOT_USER = "MYSQL_ROOT_USER"
MYSQL_ROOT_PASSWORD = "MYSQL_ROOT_PASSWORD"

# Database
db = SQLAlchemy()

todos = {}


def create_app(app_config: Dict[str, Any], additional_config: Dict[str, Any]) -> Flask:
    """
    Creates Flask application
    :param app_config: Flask configuration
    :param additional_config: additional configuration
    :return: Flask application object
    """
    _process_input_config(app_config, additional_config)
    app = Flask(__name__)
    app.config["SECRET_KEY"] = secrets.token_hex(16)
    app.config = {**app.config, **app_config}

    CORS(app)
    _init_db(app)
    register_routes(app)
    _init_swagger(app)

    return app


def init_autodoc_swagger(app: Flask) -> None:
    app.config.setdefault("SWAGGER", {
        "uiversion": 3,
        "title": "Equipment Management API",
        "openapi": "3.0.3",
    })

    swagger_template = {
        "openapi": "3.0.3",
        "info": {
            "title": "Equipment Management API",
            "version": "1.0.0",
            "description": "Autogenerated Swagger docs",
            "contact": {"name": "Andrii Pavelchak", "email": "apavelchak@gmail.com"},
            "license": {"name": "MIT"},
        },
        "servers": [
            {"url": "/"}
        ],
        "components": {
            "securitySchemes": {
                "bearerAuth": {
                    "type": "http",
                    "scheme": "bearer",
                    "bearerFormat": "JWT"
                }
            }
        },
        "security": [{"bearerAuth": []}],
    }

    Swagger(app, template=swagger_template)


def _init_swagger(app: Flask) -> None:
    authorizations = {
        'Bearer': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization',
            'description': 'JWT Token. Format: Bearer <token>'
        }
    }
    
    api = Api(
        app, 
        title='Equipment Management System API',
        description='Complete REST API for equipment management system with authentication',
        version='1.0',
        doc='/api/docs/',
        prefix='/api/v1',
        authorizations=authorizations,
        security='Bearer'
    )
    
    # Equipment models
    equipment_model = api.model('Equipment', {
        'id': fields.Integer(description='Equipment ID'),
        'name': fields.String(required=True, description='Equipment name'),
        'description': fields.String(required=True, description='Equipment description'),
        'status': fields.String(required=True, description='Equipment status'),
        'equipment_item_id': fields.Integer(description='Equipment item ID')
    })
    
    equipment_item_model = api.model('EquipmentItem', {
        'id': fields.Integer(description='Equipment Item ID'),
        'condition': fields.String(required=True, description='Item condition'),
        'purchase_date': fields.Date(description='Purchase date'),
        'serial_number': fields.String(required=True, description='Serial number'),
        'equipment_type_id': fields.Integer(description='Equipment type ID')
    })
    
    equipment_type_model = api.model('EquipmentType', {
        'id': fields.Integer(description='Equipment Type ID'),
        'name': fields.String(required=True, description='Type name'),
        'description': fields.String(required=True, description='Type description')
    })
    
    # Student models
    student_model = api.model('Student', {
        'id': fields.Integer(description='Student ID'),
        'name': fields.String(required=True, description='Student name'),
        'group': fields.String(description='Student group'),
        'email': fields.String(description='Student email')
    })
    
    # Master models
    master_model = api.model('Master', {
        'id': fields.Integer(description='Master ID'),
        'name': fields.String(required=True, description='Master name'),
        'specialization': fields.String(description='Master specialization'),
        'email': fields.String(description='Master email')
    })
    
    # Project models
    project_model = api.model('Project', {
        'id': fields.Integer(description='Project ID'),
        'name': fields.String(required=True, description='Project name'),
        'description': fields.String(description='Project description'),
        'start_date': fields.Date(description='Start date'),
        'end_date': fields.Date(description='End date')
    })
    
    # Supplier models
    supplier_model = api.model('Supplier', {
        'id': fields.Integer(description='Supplier ID'),
        'name': fields.String(required=True, description='Supplier name'),
        'contact_person': fields.String(description='Contact person'),
        'phone': fields.String(description='Phone number'),
        'email': fields.String(description='Email address')
    })
    
    # Equipment Usage models
    equipment_usage_model = api.model('EquipmentUsage', {
        'id': fields.Integer(description='Usage ID'),
        'equipment_id': fields.Integer(description='Equipment ID'),
        'student_id': fields.Integer(description='Student ID'),
        'usage_date': fields.Date(description='Usage date'),
        'purpose': fields.String(description='Usage purpose')
    })
    
    # Equipment Reservation models
    equipment_reservation_model = api.model('EquipmentReservation', {
        'id': fields.Integer(description='Reservation ID'),
        'equipment_id': fields.Integer(description='Equipment ID'),
        'student_id': fields.Integer(description='Student ID'),
        'reservation_date': fields.Date(description='Reservation date'),
        'return_date': fields.Date(description='Return date'),
        'status': fields.String(description='Reservation status')
    })
    
    # Repairment models
    repairment_model = api.model('Repairment', {
        'id': fields.Integer(description='Repairment ID'),
        'equipment_id': fields.Integer(description='Equipment ID'),
        'repair_date': fields.Date(description='Repair date'),
        'description': fields.String(description='Repair description'),
        'cost': fields.Float(description='Repair cost'),
        'status': fields.String(description='Repair status')
    })
    
    # Authentication models
    login_model = api.model('Login', {
        'username': fields.String(required=True, description='Username'),
        'password': fields.String(required=True, description='Password')
    })
    
    register_model = api.model('Register', {
        'username': fields.String(required=True, description='Username'),
        'password': fields.String(required=True, description='Password'),
        'email': fields.String(required=True, description='Email')
    })
    
    # Response models
    message_response_model = api.model('MessageResponse', {
        'message': fields.String(description='Response message')
    })
    
    token_response_model = api.model('TokenResponse', {
        'token': fields.String(description='JWT Access Token'),
        'user': fields.Nested(api.model('UserInfo', {
            'id': fields.Integer(description='User ID'),
            'username': fields.String(description='Username'),
            'email': fields.String(description='Email')
        })),
        'message': fields.String(description='Success message')
    })
    
    health_model = api.model('HealthStatus', {
        'status': fields.String(description='System status'),
        'message': fields.String(description='Status message'),
        'version': fields.String(description='API version'),
        'database': fields.String(description='Database status'),
        'timestamp': fields.String(description='Current timestamp')
    })
    
    def token_required(f):
        @wraps(f)
        def decorated(*args, **kwargs):
            token = request.headers.get('Authorization')
            if not token:
                api.abort(401, 'Token is missing!')
            
            try:
                if token.startswith('Bearer '):
                    token = token[7:]
                data = jwt.decode(token, app.config['SECRET_KEY'], algorithms=['HS256'])
                g.current_user = data['username']
            except:
                api.abort(401, 'Invalid token!')
            
            return f(*args, **kwargs)
        return decorated
    
    def get_dao_data(dao_class, method_name='find_all', *args):
        """Helper function to get data from DAO"""
        try:
            dao = dao_class()
            method = getattr(dao, method_name)
            if args:
                result = method(*args)
            else:
                result = method()
            if result is None:
                return []
            if hasattr(result, '__iter__') and not isinstance(result, str):
                return [item.put_into_dto() for item in result]
            else:
                return result.put_into_dto() if hasattr(result, 'put_into_dto') else result
        except Exception as e:
            print(f"Error in get_dao_data: {e}")
            return []
    
    # Mock users for authentication
    users_db = {
        'admin': {
            'id': 1,
            'username': 'admin',
            'email': 'admin@equipment.com',
            'password': generate_password_hash('admin123'),
        },
        'user': {
            'id': 2,
            'username': 'user',
            'email': 'user@equipment.com', 
            'password': generate_password_hash('user123'),
        }
    }
    
    # In-memory storage for equipment data (like pizza_db in working example)
    equipment_db = {
        1: {'id': 1, 'name': 'Desktop Computer', 'description': 'High-performance desktop computer', 'status': 'Available', 'equipment_item_id': 1},
        2: {'id': 2, 'name': 'Laptop', 'description': 'Portable laptop computer', 'status': 'In Use', 'equipment_item_id': 2},
        3: {'id': 3, 'name': 'Projector', 'description': 'HD projector for presentations', 'status': 'Available', 'equipment_item_id': 3},
        4: {'id': 4, 'name': 'Printer', 'description': 'Laser printer for documents', 'status': 'Maintenance', 'equipment_item_id': 4},
        5: {'id': 5, 'name': 'Scanner', 'description': 'Document scanner', 'status': 'Available', 'equipment_item_id': 5}
    }
    
    equipment_items_db = {
        1: {'id': 1, 'condition': 'Excellent', 'purchase_date': '2023-01-15', 'serial_number': 'PC001', 'equipment_type_id': 1},
        2: {'id': 2, 'condition': 'Good', 'purchase_date': '2023-02-20', 'serial_number': 'LAP002', 'equipment_type_id': 1},
        3: {'id': 3, 'condition': 'Very Good', 'purchase_date': '2023-03-10', 'serial_number': 'PROJ003', 'equipment_type_id': 2},
        4: {'id': 4, 'condition': 'Fair', 'purchase_date': '2022-12-05', 'serial_number': 'PRINT004', 'equipment_type_id': 3},
        5: {'id': 5, 'condition': 'Excellent', 'purchase_date': '2023-04-01', 'serial_number': 'SCAN005', 'equipment_type_id': 4}
    }
    
    equipment_types_db = {
        1: {'id': 1, 'name': 'Computer', 'description': 'Desktop and laptop computers'},
        2: {'id': 2, 'name': 'Projector', 'description': 'Presentation projectors'},
        3: {'id': 3, 'name': 'Printer', 'description': 'Printing devices'},
        4: {'id': 4, 'name': 'Scanner', 'description': 'Document scanning devices'},
        5: {'id': 5, 'name': 'Network Equipment', 'description': 'Routers, switches, and networking devices'}
    }
    
    students_db = {
        1: {'id': 1, 'name': 'John Smith', 'group': 'CS-21-1', 'email': 'john.smith@university.edu'},
        2: {'id': 2, 'name': 'Sarah Johnson', 'group': 'CS-21-2', 'email': 'sarah.johnson@university.edu'},
        3: {'id': 3, 'name': 'Mike Brown', 'group': 'IT-21-1', 'email': 'mike.brown@university.edu'},
        4: {'id': 4, 'name': 'Emily Davis', 'group': 'CS-22-1', 'email': 'emily.davis@university.edu'},
        5: {'id': 5, 'name': 'David Wilson', 'group': 'IT-22-1', 'email': 'david.wilson@university.edu'}
    }
    
    masters_db = {
        1: {'id': 1, 'name': 'Dr. Anderson', 'specialization': 'Computer Science', 'email': 'anderson@university.edu'},
        2: {'id': 2, 'name': 'Prof. Taylor', 'specialization': 'Information Technology', 'email': 'taylor@university.edu'},
        3: {'id': 3, 'name': 'Dr. Miller', 'specialization': 'Software Engineering', 'email': 'miller@university.edu'},
        4: {'id': 4, 'name': 'Prof. Garcia', 'specialization': 'Data Science', 'email': 'garcia@university.edu'},
        5: {'id': 5, 'name': 'Dr. Lee', 'specialization': 'Cybersecurity', 'email': 'lee@university.edu'}
    }
    
    projects_db = {
        1: {'id': 1, 'name': 'Web Development Project', 'description': 'Building a modern web application', 'start_date': '2024-01-15', 'end_date': '2024-06-15'},
        2: {'id': 2, 'name': 'Mobile App Development', 'description': 'Creating a cross-platform mobile app', 'start_date': '2024-02-01', 'end_date': '2024-07-01'},
        3: {'id': 3, 'name': 'Database Design', 'description': 'Designing and implementing a database system', 'start_date': '2024-01-20', 'end_date': '2024-05-20'},
        4: {'id': 4, 'name': 'AI Research Project', 'description': 'Machine learning and AI research', 'start_date': '2024-03-01', 'end_date': '2024-12-01'},
        5: {'id': 5, 'name': 'Network Security', 'description': 'Cybersecurity and network protection', 'start_date': '2024-02-15', 'end_date': '2024-08-15'}
    }
    
    suppliers_db = {
        1: {'id': 1, 'name': 'TechSupply Inc.', 'contact_person': 'John Manager', 'phone': '+1-555-0101', 'email': 'orders@techsupply.com'},
        2: {'id': 2, 'name': 'ComputerWorld Ltd.', 'contact_person': 'Sarah Director', 'phone': '+1-555-0102', 'email': 'sales@computerworld.com'},
        3: {'id': 3, 'name': 'Office Equipment Co.', 'contact_person': 'Mike Sales', 'phone': '+1-555-0103', 'email': 'info@officeequip.com'},
        4: {'id': 4, 'name': 'Digital Solutions', 'contact_person': 'Emily Tech', 'phone': '+1-555-0104', 'email': 'contact@digitalsolutions.com'},
        5: {'id': 5, 'name': 'Hardware Plus', 'contact_person': 'David Supply', 'phone': '+1-555-0105', 'email': 'orders@hardwareplus.com'}
    }
    
    equipment_usage_db = {
        1: {'id': 1, 'equipment_id': 1, 'student_id': 1, 'usage_date': '2024-01-15', 'purpose': 'Programming assignment'},
        2: {'id': 2, 'equipment_id': 2, 'student_id': 2, 'usage_date': '2024-01-16', 'purpose': 'Research project'},
        3: {'id': 3, 'equipment_id': 3, 'student_id': 3, 'usage_date': '2024-01-17', 'purpose': 'Presentation'},
        4: {'id': 4, 'equipment_id': 4, 'student_id': 4, 'usage_date': '2024-01-18', 'purpose': 'Document printing'},
        5: {'id': 5, 'equipment_id': 5, 'student_id': 5, 'usage_date': '2024-01-19', 'purpose': 'Document scanning'}
    }
    
    equipment_reservations_db = {
        1: {'id': 1, 'equipment_id': 1, 'student_id': 1, 'reservation_date': '2024-01-20', 'return_date': '2024-01-25', 'status': 'Active'},
        2: {'id': 2, 'equipment_id': 2, 'student_id': 2, 'reservation_date': '2024-01-21', 'return_date': '2024-01-26', 'status': 'Active'},
        3: {'id': 3, 'equipment_id': 3, 'student_id': 3, 'reservation_date': '2024-01-22', 'return_date': '2024-01-27', 'status': 'Completed'},
        4: {'id': 4, 'equipment_id': 4, 'student_id': 4, 'reservation_date': '2024-01-23', 'return_date': '2024-01-28', 'status': 'Active'},
        5: {'id': 5, 'equipment_id': 5, 'student_id': 5, 'reservation_date': '2024-01-24', 'return_date': '2024-01-29', 'status': 'Pending'}
    }
    
    repairments_db = {
        1: {'id': 1, 'equipment_id': 4, 'repair_date': '2024-01-10', 'description': 'Printer paper jam issue', 'cost': 50.0, 'status': 'Completed'},
        2: {'id': 2, 'equipment_id': 2, 'repair_date': '2024-01-12', 'description': 'Laptop screen replacement', 'cost': 200.0, 'status': 'In Progress'},
        3: {'id': 3, 'equipment_id': 1, 'repair_date': '2024-01-14', 'description': 'Desktop hardware upgrade', 'cost': 150.0, 'status': 'Completed'},
        4: {'id': 4, 'equipment_id': 3, 'repair_date': '2024-01-16', 'description': 'Projector bulb replacement', 'cost': 75.0, 'status': 'Pending'},
        5: {'id': 5, 'equipment_id': 5, 'repair_date': '2024-01-18', 'description': 'Scanner calibration', 'cost': 25.0, 'status': 'Completed'}
    }
    
    # Create namespaces
    ns_auth = api.namespace('auth', description='Authentication and authorization')
    ns_equipment = api.namespace('equipment', description='Equipment management')
    ns_equipment_items = api.namespace('equipment-items', description='Equipment items management')
    ns_equipment_types = api.namespace('equipment-types', description='Equipment types management')
    ns_students = api.namespace('students', description='Student management')
    ns_masters = api.namespace('masters', description='Master management')
    ns_projects = api.namespace('projects', description='Project management')
    ns_suppliers = api.namespace('suppliers', description='Supplier management')
    ns_usage = api.namespace('usage', description='Equipment usage management')
    ns_reservations = api.namespace('reservations', description='Equipment reservations management')
    ns_repairments = api.namespace('repairments', description='Equipment repairments management')
    ns_health = api.namespace('health', description='System monitoring')
    
    # Authentication endpoints
    @ns_auth.route('/register')
    class Register(Resource):
        @api.expect(register_model)
        @api.marshal_with(message_response_model)
        def post(self):
            """Register new user"""
            data = request.get_json()
            username = data.get('username')
            
            if not username or not data.get('password') or not data.get('email'):
                api.abort(400, 'Username, password and email are required')
            
            if username in users_db:
                api.abort(400, f'User {username} already exists')
            
            users_db[username] = {
                'id': len(users_db) + 1,
                'username': username,
                'email': data.get('email'),
                'password': generate_password_hash(data.get('password')),
            }
            
            return {'message': f'User {username} registered successfully!'}, 201
    
    @ns_auth.route('/login')
    class Login(Resource):
        @api.expect(login_model)
        @api.marshal_with(token_response_model)
        def post(self):
            """Login and get JWT token"""
            data = request.get_json()
            username = data.get('username')
            password = data.get('password')
            
            user = users_db.get(username)
            if not user or not check_password_hash(user['password'], password):
                api.abort(401, 'Invalid credentials')
            
            token = jwt.encode({
                'username': username,
                'exp': datetime.utcnow() + timedelta(hours=24)
            }, app.config['SECRET_KEY'], algorithm='HS256')
            
            return {
                'token': token,
                'user': {
                    'id': user['id'],
                    'username': user['username'],
                    'email': user['email']
                },
                'message': 'Login successful!'
            }
    
    # Equipment endpoints
    @ns_equipment.route('/')
    class EquipmentList(Resource):
        @api.marshal_list_with(equipment_model)
        def get(self):
            """Get all equipment"""
            return list(equipment_db.values())
        
        @api.doc(security='Bearer')
        @token_required
        @api.expect(equipment_model)
        @api.marshal_with(equipment_model)
        def post(self):
            """Create new equipment"""
            data = request.get_json()
            equipment_id = max(equipment_db.keys()) + 1 if equipment_db else 1
            equipment = {
                'id': equipment_id,
                'name': data.get('name'),
                'description': data.get('description'),
                'status': data.get('status'),
                'equipment_item_id': data.get('equipment_item_id')
            }
            equipment_db[equipment_id] = equipment
            return equipment, 201
    
    @ns_equipment.route('/<int:equipment_id>')
    class Equipment(Resource):
        @api.marshal_with(equipment_model)
        def get(self, equipment_id):
            """Get equipment by ID"""
            equipment = equipment_db.get(equipment_id)
            if not equipment:
                api.abort(404, 'Equipment not found')
            return equipment
        
        @api.doc(security='Bearer')
        @token_required
        @api.expect(equipment_model)
        @api.marshal_with(message_response_model)
        def put(self, equipment_id):
            """Update equipment by ID"""
            try:
                from my_project.auth.dao.orders.equipment_dao import EquipmentDAO
                from my_project.auth.domain.orders.equipment import Equipment
                data = request.get_json()
                equipment = Equipment.create_from_dto(data)
                dao = EquipmentDAO()
                dao.update(equipment_id, equipment)
                return {'message': 'Equipment updated successfully'}
            except Exception as e:
                print(f"Error updating equipment {equipment_id}: {e}")
                api.abort(500, 'Internal server error')
        
        @api.doc(security='Bearer')
        @token_required
        @api.marshal_with(message_response_model)
        def delete(self, equipment_id):
            """Delete equipment by ID"""
            try:
                from my_project.auth.dao.orders.equipment_dao import EquipmentDAO
                dao = EquipmentDAO()
                dao.delete(equipment_id)
                return {'message': 'Equipment deleted successfully'}
            except Exception as e:
                print(f"Error deleting equipment {equipment_id}: {e}")
                api.abort(500, 'Internal server error')
    
    # Equipment Items endpoints
    @ns_equipment_items.route('/')
    class EquipmentItemsList(Resource):
        @api.marshal_list_with(equipment_item_model)
        def get(self):
            """Get all equipment items"""
            return list(equipment_items_db.values())
        
        @api.doc(security='Bearer')
        @token_required
        @api.expect(equipment_item_model)
        @api.marshal_with(equipment_item_model)
        def post(self):
            """Create new equipment item"""
            data = request.get_json()
            item_id = max(equipment_items_db.keys()) + 1 if equipment_items_db else 1
            item = {
                'id': item_id,
                'condition': data.get('condition'),
                'purchase_date': data.get('purchase_date'),
                'serial_number': data.get('serial_number'),
                'equipment_type_id': data.get('equipment_type_id')
            }
            equipment_items_db[item_id] = item
            return item, 201
    
    @ns_equipment_items.route('/<int:item_id>')
    class EquipmentItem(Resource):
        @api.marshal_with(equipment_item_model)
        def get(self, item_id):
            """Get equipment item by ID"""
            item = equipment_items_db.get(item_id)
            if not item:
                api.abort(404, 'Equipment item not found')
            return item
    
    # Equipment Types endpoints
    @ns_equipment_types.route('/')
    class EquipmentTypesList(Resource):
        @api.marshal_list_with(equipment_type_model)
        def get(self):
            """Get all equipment types"""
            return list(equipment_types_db.values())
        
        @api.doc(security='Bearer')
        @token_required
        @api.expect(equipment_type_model)
        @api.marshal_with(equipment_type_model)
        def post(self):
            """Create new equipment type"""
            data = request.get_json()
            type_id = max(equipment_types_db.keys()) + 1 if equipment_types_db else 1
            eq_type = {
                'id': type_id,
                'name': data.get('name'),
                'description': data.get('description')
            }
            equipment_types_db[type_id] = eq_type
            return eq_type, 201
    
    # Students endpoints
    @ns_students.route('/')
    class StudentsList(Resource):
        @api.marshal_list_with(student_model)
        def get(self):
            """Get all students"""
            return list(students_db.values())
        
        @api.doc(security='Bearer')
        @token_required
        @api.expect(student_model)
        @api.marshal_with(student_model)
        def post(self):
            """Create new student"""
            data = request.get_json()
            student_id = max(students_db.keys()) + 1 if students_db else 1
            student = {
                'id': student_id,
                'name': data.get('name'),
                'group': data.get('group'),
                'email': data.get('email')
            }
            students_db[student_id] = student
            return student, 201
    
    # Masters endpoints
    @ns_masters.route('/')
    class MastersList(Resource):
        @api.marshal_list_with(master_model)
        def get(self):
            """Get all masters"""
            return list(masters_db.values())
        
        @api.doc(security='Bearer')
        @token_required
        @api.expect(master_model)
        @api.marshal_with(master_model)
        def post(self):
            """Create new master"""
            data = request.get_json()
            master_id = max(masters_db.keys()) + 1 if masters_db else 1
            master = {
                'id': master_id,
                'name': data.get('name'),
                'specialization': data.get('specialization'),
                'email': data.get('email')
            }
            masters_db[master_id] = master
            return master, 201
    
    # Projects endpoints
    @ns_projects.route('/')
    class ProjectsList(Resource):
        @api.marshal_list_with(project_model)
        def get(self):
            """Get all projects"""
            return list(projects_db.values())
        
        @api.doc(security='Bearer')
        @token_required
        @api.expect(project_model)
        @api.marshal_with(project_model)
        def post(self):
            """Create new project"""
            data = request.get_json()
            project_id = max(projects_db.keys()) + 1 if projects_db else 1
            project = {
                'id': project_id,
                'name': data.get('name'),
                'description': data.get('description'),
                'start_date': data.get('start_date'),
                'end_date': data.get('end_date')
            }
            projects_db[project_id] = project
            return project, 201
    
    # Suppliers endpoints
    @ns_suppliers.route('/')
    class SuppliersList(Resource):
        @api.marshal_list_with(supplier_model)
        def get(self):
            """Get all suppliers"""
            return list(suppliers_db.values())
        
        @api.doc(security='Bearer')
        @token_required
        @api.expect(supplier_model)
        @api.marshal_with(supplier_model)
        def post(self):
            """Create new supplier"""
            data = request.get_json()
            supplier_id = max(suppliers_db.keys()) + 1 if suppliers_db else 1
            supplier = {
                'id': supplier_id,
                'name': data.get('name'),
                'contact_person': data.get('contact_person'),
                'phone': data.get('phone'),
                'email': data.get('email')
            }
            suppliers_db[supplier_id] = supplier
            return supplier, 201
    
    # Equipment Usage endpoints
    @ns_usage.route('/')
    class EquipmentUsageList(Resource):
        @api.marshal_list_with(equipment_usage_model)
        def get(self):
            """Get all equipment usage records"""
            return list(equipment_usage_db.values())
        
        @api.doc(security='Bearer')
        @token_required
        @api.expect(equipment_usage_model)
        @api.marshal_with(equipment_usage_model)
        def post(self):
            """Create new equipment usage record"""
            data = request.get_json()
            usage_id = max(equipment_usage_db.keys()) + 1 if equipment_usage_db else 1
            usage = {
                'id': usage_id,
                'equipment_id': data.get('equipment_id'),
                'student_id': data.get('student_id'),
                'usage_date': data.get('usage_date'),
                'purpose': data.get('purpose')
            }
            equipment_usage_db[usage_id] = usage
            return usage, 201
    
    # Equipment Reservations endpoints
    @ns_reservations.route('/')
    class EquipmentReservationsList(Resource):
        @api.marshal_list_with(equipment_reservation_model)
        def get(self):
            """Get all equipment reservations"""
            return list(equipment_reservations_db.values())
        
        @api.doc(security='Bearer')
        @token_required
        @api.expect(equipment_reservation_model)
        @api.marshal_with(equipment_reservation_model)
        def post(self):
            """Create new equipment reservation"""
            data = request.get_json()
            reservation_id = max(equipment_reservations_db.keys()) + 1 if equipment_reservations_db else 1
            reservation = {
                'id': reservation_id,
                'equipment_id': data.get('equipment_id'),
                'student_id': data.get('student_id'),
                'reservation_date': data.get('reservation_date'),
                'return_date': data.get('return_date'),
                'status': data.get('status')
            }
            equipment_reservations_db[reservation_id] = reservation
            return reservation, 201
    
    # Repairments endpoints
    @ns_repairments.route('/')
    class RepairmentsList(Resource):
        @api.marshal_list_with(repairment_model)
        def get(self):
            """Get all equipment repairments"""
            return list(repairments_db.values())
        
        @api.doc(security='Bearer')
        @token_required
        @api.expect(repairment_model)
        @api.marshal_with(repairment_model)
        def post(self):
            """Create new equipment repairment"""
            data = request.get_json()
            repairment_id = max(repairments_db.keys()) + 1 if repairments_db else 1
            repairment = {
                'id': repairment_id,
                'equipment_id': data.get('equipment_id'),
                'repair_date': data.get('repair_date'),
                'description': data.get('description'),
                'cost': data.get('cost'),
                'status': data.get('status')
            }
            repairments_db[repairment_id] = repairment
            return repairment, 201
    
    # Health check endpoint
    @ns_health.route('/status')
    class HealthCheck(Resource):
        @api.marshal_with(health_model)
        def get(self):
            """System health check"""
            return {
                'status': 'healthy',
                'message': 'Equipment Management System API is running!',
                'version': '1.0',
                'database': 'connected',
                'equipment_count': len(equipment_db),
                'equipment_items_count': len(equipment_items_db),
                'equipment_types_count': len(equipment_types_db),
                'students_count': len(students_db),
                'masters_count': len(masters_db),
                'projects_count': len(projects_db),
                'suppliers_count': len(suppliers_db),
                'usage_records_count': len(equipment_usage_db),
                'reservations_count': len(equipment_reservations_db),
                'repairments_count': len(repairments_db),
                'timestamp': datetime.utcnow().isoformat()
            }
    
    # Root endpoint
    @app.route("/")
    def hello_world():
        return jsonify({
            'message': 'Welcome to Equipment Management System API!',
            'docs_url': '/api/docs/',
            'api_version': '1.0',
            'features': [
                'JWT Authentication',
                'Equipment Management',
                'Student Management',
                'Project Management',
                'Reservation System',
                'Usage Tracking',
                'Repairment Management',
                'Real-time Statistics'
            ],
            'data_counts': {
                'equipment': len(equipment_db),
                'equipment_items': len(equipment_items_db),
                'equipment_types': len(equipment_types_db),
                'students': len(students_db),
                'masters': len(masters_db),
                'projects': len(projects_db),
                'suppliers': len(suppliers_db),
                'usage_records': len(equipment_usage_db),
                'reservations': len(equipment_reservations_db),
                'repairments': len(repairments_db)
            },
            'endpoints': {
                'authentication': {
                    'login': '/api/v1/auth/login',
                    'register': '/api/v1/auth/register'
                },
                'equipment': {
                    'list': '/api/v1/equipment/',
                    'by_id': '/api/v1/equipment/{id}'
                },
                'equipment_items': {
                    'list': '/api/v1/equipment-items/',
                    'by_id': '/api/v1/equipment-items/{id}'
                },
                'equipment_types': {
                    'list': '/api/v1/equipment-types/',
                    'by_id': '/api/v1/equipment-types/{id}'
                },
                'students': {
                    'list': '/api/v1/students/',
                    'by_id': '/api/v1/students/{id}'
                },
                'masters': {
                    'list': '/api/v1/masters/',
                    'by_id': '/api/v1/masters/{id}'
                },
                'projects': {
                    'list': '/api/v1/projects/',
                    'by_id': '/api/v1/projects/{id}'
                },
                'suppliers': {
                    'list': '/api/v1/suppliers/',
                    'by_id': '/api/v1/suppliers/{id}'
                },
                'usage': {
                    'list': '/api/v1/usage/',
                    'by_id': '/api/v1/usage/{id}'
                },
                'reservations': {
                    'list': '/api/v1/reservations/',
                    'by_id': '/api/v1/reservations/{id}'
                },
                'repairments': {
                    'list': '/api/v1/repairments/',
                    'by_id': '/api/v1/repairments/{id}'
                },
                'system': {
                    'health': '/api/v1/health/status'
                }
            },
            'test_credentials': {
                'admin': {'username': 'admin', 'password': 'admin123'},
                'user': {'username': 'user', 'password': 'user123'}
            },
            'instructions': [
                '1. Visit /api/docs/ for interactive API documentation',
                '2. Login with test credentials to get JWT token',
                '3. Use "Bearer <token>" in Authorization header for protected endpoints',
                '4. All data is stored in memory (like Pizza API example)',
                '5. GET requests now return real data instead of empty fields!',
                '6. Admin users have access to all management features'
            ]
        })


def _init_db(app: Flask) -> None:
    """
    Initializes DB with SQLAlchemy
    :param app: Flask application object
    """
    app.config.setdefault("SQLALCHEMY_ENGINE_OPTIONS", {})

    db.init_app(app)

    if not database_exists(app.config["SQLALCHEMY_DATABASE_URI"]):
        create_database(app.config["SQLALCHEMY_DATABASE_URI"])

    import my_project.auth.domain
    with app.app_context():
        db.create_all()


def _process_input_config(app_config: Dict[str, Any], additional_config: Dict[str, Any]) -> None:
    """
    Processes input configuration
    :param app_config: Flask configuration
    :param additional_config: additional configuration
    """
    load_dotenv()
    conn = os.getenv(SQLALCHEMY_DATABASE_URI)
    if conn:
        app_config["SQLALCHEMY_DATABASE_URI"] = conn
        return

    user = os.getenv(MYSQL_ROOT_USER, str(additional_config.get("MYSQL_ROOT_USER", "")))
    pwd  = os.getenv(MYSQL_ROOT_PASSWORD, str(additional_config.get("MYSQL_ROOT_PASSWORD", "")))

    template = app_config.get("SQLALCHEMY_DATABASE_URI", "")
    if not template:
        raise ValueError("SQLALCHEMY_DATABASE_URI is missing and no CONNECTION_STRING provided in env.")

    if "{user}" in template or "{password}" in template:
        app_config["SQLALCHEMY_DATABASE_URI"] = template.format(
            user=user,
            password=quote_plus(pwd),
        )
        return

    if "{}" in template:
        app_config["SQLALCHEMY_DATABASE_URI"] = template.format(
            user, quote_plus(pwd)
        )
        return

    app_config["SQLALCHEMY_DATABASE_URI"] = template
#test