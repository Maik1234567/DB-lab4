"""
2022
apavelchak@gmail.com
Â© Andrii Pavelchak
"""

import os
import re
from datetime import datetime, timedelta
from http import HTTPStatus
import secrets
import jwt
from typing import Dict, Any
from functools import wraps
from urllib.parse import quote_plus

from dotenv import load_dotenv
from flasgger import Swagger
from flask import Flask, jsonify, request, g
from flask_restx import Api, Resource, fields
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy import text
from sqlalchemy_utils import database_exists, create_database
from apispec import APISpec
from apispec_webframeworks.flask import FlaskPlugin
from flask_swagger_ui import get_swaggerui_blueprint
from flask_cors import CORS
from werkzeug.security import generate_password_hash, check_password_hash

from my_project.auth.route import register_routes

SECRET_KEY = "SECRET_KEY"
SQLALCHEMY_DATABASE_URI = "SQLALCHEMY_DATABASE_URI"
MYSQL_ROOT_USER = "MYSQL_ROOT_USER"
MYSQL_ROOT_PASSWORD = "MYSQL_ROOT_PASSWORD"

# Database
db = SQLAlchemy()

todos = {}


def create_app(app_config: Dict[str, Any], additional_config: Dict[str, Any]) -> Flask:
    """
    Creates Flask application
    :param app_config: Flask configuration
    :param additional_config: additional configuration
    :return: Flask application object
    """
    _process_input_config(app_config, additional_config)
    app = Flask(__name__)
    app.config["SECRET_KEY"] = secrets.token_hex(16)
    app.config = {**app.config, **app_config}

    CORS(app)
    _init_db(app)
    register_routes(app)
    _init_swagger(app)

    return app


def init_autodoc_swagger(app: Flask) -> None:
    app.config.setdefault("SWAGGER", {
        "uiversion": 3,
        "title": "Equipment Management API",
        "openapi": "3.0.3",
    })

    swagger_template = {
        "openapi": "3.0.3",
        "info": {
            "title": "Equipment Management API",
            "version": "1.0.0",
            "description": "Autogenerated Swagger docs",
            "contact": {"name": "Andrii Pavelchak", "email": "apavelchak@gmail.com"},
            "license": {"name": "MIT"},
        },
        "servers": [
            {"url": "/"}
        ],
        "components": {
            "securitySchemes": {
                "bearerAuth": {
                    "type": "http",
                    "scheme": "bearer",
                    "bearerFormat": "JWT"
                }
            }
        },
        "security": [{"bearerAuth": []}],
    }

    Swagger(app, template=swagger_template)


def _init_swagger(app: Flask) -> None:
    authorizations = {
        'Bearer': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization',
            'description': 'JWT Token. Format: Bearer <token>'
        }
    }
    
    api = Api(
        app, 
        title='Equipment Management API',
        description='Complete REST API for equipment management system with authentication',
        version='1.0',
        doc='/api/docs/',
        prefix='/api/v1',
        authorizations=authorizations,
        security='Bearer'
    )
    
    # API Models
    user_model = api.model('User', {
        'id': fields.Integer(description='User ID'),
        'username': fields.String(required=True, description='Username'),
        'email': fields.String(required=True, description='Email'),
        'phone': fields.String(description='Phone number'),
        'address': fields.String(description='Address')
    })
    
    login_model = api.model('Login', {
        'username': fields.String(required=True, description='Username'),
        'password': fields.String(required=True, description='Password')
    })
    
    register_model = api.model('Register', {
        'username': fields.String(required=True, description='Username'),
        'password': fields.String(required=True, description='Password'),
        'email': fields.String(required=True, description='Email'),
        'phone': fields.String(description='Phone number'),
        'address': fields.String(description='Address')
    })
    
    # API Response models
    token_response_model = api.model('TokenResponse', {
        'token': fields.String(description='JWT Access Token'),
        'user': fields.Nested(api.model('UserInfo', {
            'id': fields.Integer(description='User ID'),
            'username': fields.String(description='Username'),
            'email': fields.String(description='Email')
        })),
        'message': fields.String(description='Success message')
    })
    
    message_response_model = api.model('MessageResponse', {
        'message': fields.String(description='Response message')
    })
    
    health_model = api.model('HealthStatus', {
        'status': fields.String(description='System status'),
        'message': fields.String(description='Status message'),
        'version': fields.String(description='API version'),
        'database': fields.String(description='Database status'),
        'timestamp': fields.String(description='Current timestamp')
    })
    
    def token_required(f):
        @wraps(f)
        def decorated(*args, **kwargs):
            token = request.headers.get('Authorization')
            if not token:
                api.abort(401, 'Token is missing!')
            
            try:
                if token.startswith('Bearer '):
                    token = token[7:]
                data = jwt.decode(token, app.config['SECRET_KEY'], algorithms=['HS256'])
                g.current_user = data['username']
            except:
                api.abort(401, 'Invalid token!')
            
            return f(*args, **kwargs)
        return decorated
    
    # Simple in-memory user storage for demo
    users_db = {
        'admin': {
            'id': 1,
            'username': 'admin',
            'email': 'admin@equipment.com',
            'password': generate_password_hash('admin123'),
            'phone': '+380123456789',
            'address': '123 Main St'
        },
        'user': {
            'id': 2,
            'username': 'user',
            'email': 'user@gmail.com', 
            'password': generate_password_hash('user123'),
            'phone': '+380987654321',
            'address': '456 Oak Ave'
        }
    }
    
    ns_auth = api.namespace('auth', description='Authentication and authorization')
    ns_users = api.namespace('users', description='User management')
    ns_health = api.namespace('health', description='System monitoring')
    
    @ns_auth.route('/register')
    class Register(Resource):
        @api.expect(register_model)
        @api.marshal_with(message_response_model)
        def post(self):
            """Register new user"""
            data = request.get_json()
            username = data.get('username')
            
            if not username or not data.get('password') or not data.get('email'):
                api.abort(400, 'Username, password and email are required')
            
            if username in users_db:
                api.abort(400, f'User {username} already exists')
            
            users_db[username] = {
                'id': len(users_db) + 1,
                'username': username,
                'email': data.get('email'),
                'password': generate_password_hash(data.get('password')),
                'phone': data.get('phone', ''),
                'address': data.get('address', '')
            }
            
            return {'message': f'User {username} registered successfully!'}, 201
    
    @ns_auth.route('/login')
    class Login(Resource):
        @api.expect(login_model)
        @api.marshal_with(token_response_model)
        def post(self):
            """Login and get JWT token"""
            data = request.get_json()
            username = data.get('username')
            password = data.get('password')
            
            user = users_db.get(username)
            if not user or not check_password_hash(user['password'], password):
                api.abort(401, 'Invalid credentials')
            
            token = jwt.encode({
                'username': username,
                'exp': datetime.utcnow() + timedelta(hours=24)
            }, app.config['SECRET_KEY'], algorithm='HS256')
            
            return {
                'token': token,
                'user': {
                    'id': user['id'],
                    'username': user['username'],
                    'email': user['email']
                },
                'message': 'Login successful!'
            }
    
    @ns_users.route('/profile')
    class UserProfile(Resource):
        @api.doc(security='Bearer')
        @token_required
        @api.marshal_with(user_model)
        def get(self):
            """Get current user profile"""
            user = users_db.get(g.current_user)
            if not user:
                api.abort(404, 'User not found')
            return user
    
    @ns_users.route('/')
    class UsersList(Resource):
        @api.doc(security='Bearer')
        @token_required
        @api.marshal_list_with(user_model)
        def get(self):
            """Get all users (admin only)"""
            if g.current_user != 'admin':
                api.abort(403, 'Access denied')
            return list(users_db.values())
    
    @ns_health.route('/status')
    class HealthCheck(Resource):
        @api.marshal_with(health_model)
        def get(self):
            """System health check"""
            return {
                'status': 'healthy',
                'message': 'Equipment Management API is running!',
                'version': '1.0',
                'database': 'connected',
                'timestamp': datetime.utcnow().isoformat()
            }
    
    @app.route("/")
    def hello_world():
        return jsonify({
            'message': 'Welcome to Equipment Management API!',
            'docs_url': '/api/docs/',
            'api_version': '1.0',
            'features': [
                'JWT Authentication',
                'User Management',
                'Equipment Management',
                'Admin Dashboard'
            ],
            'endpoints': {
                'authentication': {
                    'login': '/api/v1/auth/login',
                    'register': '/api/v1/auth/register'
                },
                'users': {
                    'profile': '/api/v1/users/profile',
                    'list_all': '/api/v1/users/'
                },
                'system': {
                    'health': '/api/v1/health/status'
                }
            },
            'test_credentials': {
                'admin': {'username': 'admin', 'password': 'admin123'},
                'user': {'username': 'user', 'password': 'user123'}
            },
            'instructions': [
                '1. Visit /api/docs/ for interactive API documentation',
                '2. Login with test credentials to get JWT token',
                '3. Use "Bearer <token>" in Authorization header for protected endpoints',
                '4. Admin users have access to management features'
            ]
        })


def _init_db(app: Flask) -> None:
    """
    Initializes DB with SQLAlchemy
    :param app: Flask application object
    """
    app.config.setdefault("SQLALCHEMY_ENGINE_OPTIONS", {})

    db.init_app(app)

    if not database_exists(app.config["SQLALCHEMY_DATABASE_URI"]):
        create_database(app.config["SQLALCHEMY_DATABASE_URI"])

    import my_project.auth.domain
    with app.app_context():
        db.create_all()


def _process_input_config(app_config: Dict[str, Any], additional_config: Dict[str, Any]) -> None:
    """
    Processes input configuration
    :param app_config: Flask configuration
    :param additional_config: additional configuration
    """
    load_dotenv()
    conn = os.getenv(SQLALCHEMY_DATABASE_URI)
    if conn:
        app_config["SQLALCHEMY_DATABASE_URI"] = conn
        return

    user = os.getenv(MYSQL_ROOT_USER, str(additional_config.get("MYSQL_ROOT_USER", "")))
    pwd  = os.getenv(MYSQL_ROOT_PASSWORD, str(additional_config.get("MYSQL_ROOT_PASSWORD", "")))

    template = app_config.get("SQLALCHEMY_DATABASE_URI", "")
    if not template:
        raise ValueError("SQLALCHEMY_DATABASE_URI is missing and no CONNECTION_STRING provided in env.")

    if "{user}" in template or "{password}" in template:
        app_config["SQLALCHEMY_DATABASE_URI"] = template.format(
            user=user,
            password=quote_plus(pwd),
        )
        return

    if "{}" in template:
        app_config["SQLALCHEMY_DATABASE_URI"] = template.format(
            user, quote_plus(pwd)
        )
        return

    app_config["SQLALCHEMY_DATABASE_URI"] = template
