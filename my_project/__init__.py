"""
2022
apavelchak@gmail.com
Â© Andrii Pavelchak
"""

import os
import re
from datetime import datetime, timedelta
from http import HTTPStatus
import secrets
import jwt
from typing import Dict, Any
from functools import wraps
from urllib.parse import quote_plus

from dotenv import load_dotenv
from flasgger import Swagger
from flask import Flask, jsonify, request, g
from flask_restx import Api, Resource, fields
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy import text
from sqlalchemy_utils import database_exists, create_database
from apispec import APISpec
from apispec_webframeworks.flask import FlaskPlugin
from flask_swagger_ui import get_swaggerui_blueprint
from flask_cors import CORS
from werkzeug.security import generate_password_hash, check_password_hash

from my_project.auth.route import register_routes

SECRET_KEY = "SECRET_KEY"
SQLALCHEMY_DATABASE_URI = "SQLALCHEMY_DATABASE_URI"
MYSQL_ROOT_USER = "MYSQL_ROOT_USER"
MYSQL_ROOT_PASSWORD = "MYSQL_ROOT_PASSWORD"

# Database
db = SQLAlchemy()

todos = {}


def create_app(app_config: Dict[str, Any], additional_config: Dict[str, Any]) -> Flask:
    """
    Creates Flask application
    :param app_config: Flask configuration
    :param additional_config: additional configuration
    :return: Flask application object
    """
    _process_input_config(app_config, additional_config)
    app = Flask(__name__)
    app.config["SECRET_KEY"] = secrets.token_hex(16)
    app.config = {**app.config, **app_config}

    CORS(app)
    _init_db(app)
    register_routes(app)
    _init_swagger(app)

    return app


def init_autodoc_swagger(app: Flask) -> None:
    app.config.setdefault("SWAGGER", {
        "uiversion": 3,
        "title": "Equipment Management API",
        "openapi": "3.0.3",
    })

    swagger_template = {
        "openapi": "3.0.3",
        "info": {
            "title": "Equipment Management API",
            "version": "1.0.0",
            "description": "Autogenerated Swagger docs",
            "contact": {"name": "Andrii Pavelchak", "email": "apavelchak@gmail.com"},
            "license": {"name": "MIT"},
        },
        "servers": [
            {"url": "/"}
        ],
        "components": {
            "securitySchemes": {
                "bearerAuth": {
                    "type": "http",
                    "scheme": "bearer",
                    "bearerFormat": "JWT"
                }
            }
        },
        "security": [{"bearerAuth": []}],
    }

    Swagger(app, template=swagger_template)


def _init_swagger(app: Flask) -> None:
    authorizations = {
        'Bearer': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization',
            'description': 'JWT Token. Format: Bearer <token>'
        }
    }
    
    api = Api(
        app, 
        title='Equipment Management System API',
        description='Complete REST API for equipment management system with authentication',
        version='1.0',
        doc='/api/docs/',
        prefix='/api/v1',
        authorizations=authorizations,
        security='Bearer'
    )
    
    # Equipment models
    equipment_model = api.model('Equipment', {
        'id': fields.Integer(description='Equipment ID'),
        'name': fields.String(required=True, description='Equipment name'),
        'description': fields.String(required=True, description='Equipment description'),
        'status': fields.String(required=True, description='Equipment status'),
        'equipment_item_id': fields.Integer(description='Equipment item ID')
    })
    
    equipment_item_model = api.model('EquipmentItem', {
        'id': fields.Integer(description='Equipment Item ID'),
        'condition': fields.String(required=True, description='Item condition'),
        'purchase_date': fields.Date(description='Purchase date'),
        'serial_number': fields.String(required=True, description='Serial number'),
        'equipment_type_id': fields.Integer(description='Equipment type ID')
    })
    
    equipment_type_model = api.model('EquipmentType', {
        'id': fields.Integer(description='Equipment Type ID'),
        'name': fields.String(required=True, description='Type name'),
        'description': fields.String(required=True, description='Type description')
    })
    
    # Student models
    student_model = api.model('Student', {
        'id': fields.Integer(description='Student ID'),
        'name': fields.String(required=True, description='Student name'),
        'group': fields.String(description='Student group'),
        'email': fields.String(description='Student email')
    })
    
    # Master models
    master_model = api.model('Master', {
        'id': fields.Integer(description='Master ID'),
        'name': fields.String(required=True, description='Master name'),
        'specialization': fields.String(description='Master specialization'),
        'email': fields.String(description='Master email')
    })
    
    # Project models
    project_model = api.model('Project', {
        'id': fields.Integer(description='Project ID'),
        'name': fields.String(required=True, description='Project name'),
        'description': fields.String(description='Project description'),
        'start_date': fields.Date(description='Start date'),
        'end_date': fields.Date(description='End date')
    })
    
    # Supplier models
    supplier_model = api.model('Supplier', {
        'id': fields.Integer(description='Supplier ID'),
        'name': fields.String(required=True, description='Supplier name'),
        'contact_person': fields.String(description='Contact person'),
        'phone': fields.String(description='Phone number'),
        'email': fields.String(description='Email address')
    })
    
    # Equipment Usage models
    equipment_usage_model = api.model('EquipmentUsage', {
        'id': fields.Integer(description='Usage ID'),
        'equipment_id': fields.Integer(description='Equipment ID'),
        'student_id': fields.Integer(description='Student ID'),
        'usage_date': fields.Date(description='Usage date'),
        'purpose': fields.String(description='Usage purpose')
    })
    
    # Equipment Reservation models
    equipment_reservation_model = api.model('EquipmentReservation', {
        'id': fields.Integer(description='Reservation ID'),
        'equipment_id': fields.Integer(description='Equipment ID'),
        'student_id': fields.Integer(description='Student ID'),
        'reservation_date': fields.Date(description='Reservation date'),
        'return_date': fields.Date(description='Return date'),
        'status': fields.String(description='Reservation status')
    })
    
    # Repairment models
    repairment_model = api.model('Repairment', {
        'id': fields.Integer(description='Repairment ID'),
        'equipment_id': fields.Integer(description='Equipment ID'),
        'repair_date': fields.Date(description='Repair date'),
        'description': fields.String(description='Repair description'),
        'cost': fields.Float(description='Repair cost'),
        'status': fields.String(description='Repair status')
    })
    
    # Authentication models
    login_model = api.model('Login', {
        'username': fields.String(required=True, description='Username'),
        'password': fields.String(required=True, description='Password')
    })
    
    register_model = api.model('Register', {
        'username': fields.String(required=True, description='Username'),
        'password': fields.String(required=True, description='Password'),
        'email': fields.String(required=True, description='Email')
    })
    
    # Response models
    message_response_model = api.model('MessageResponse', {
        'message': fields.String(description='Response message')
    })
    
    token_response_model = api.model('TokenResponse', {
        'token': fields.String(description='JWT Access Token'),
        'user': fields.Nested(api.model('UserInfo', {
            'id': fields.Integer(description='User ID'),
            'username': fields.String(description='Username'),
            'email': fields.String(description='Email')
        })),
        'message': fields.String(description='Success message')
    })
    
    health_model = api.model('HealthStatus', {
        'status': fields.String(description='System status'),
        'message': fields.String(description='Status message'),
        'version': fields.String(description='API version'),
        'database': fields.String(description='Database status'),
        'timestamp': fields.String(description='Current timestamp')
    })
    
    def token_required(f):
        @wraps(f)
        def decorated(*args, **kwargs):
            token = request.headers.get('Authorization')
            if not token:
                api.abort(401, 'Token is missing!')
            
            try:
                if token.startswith('Bearer '):
                    token = token[7:]
                data = jwt.decode(token, app.config['SECRET_KEY'], algorithms=['HS256'])
                g.current_user = data['username']
            except:
                api.abort(401, 'Invalid token!')
            
            return f(*args, **kwargs)
        return decorated
    
    # Mock users for authentication
    users_db = {
        'admin': {
            'id': 1,
            'username': 'admin',
            'email': 'admin@equipment.com',
            'password': generate_password_hash('admin123'),
        },
        'user': {
            'id': 2,
            'username': 'user',
            'email': 'user@equipment.com', 
            'password': generate_password_hash('user123'),
        }
    }
    
    # Create namespaces
    ns_auth = api.namespace('auth', description='Authentication and authorization')
    ns_equipment = api.namespace('equipment', description='Equipment management')
    ns_equipment_items = api.namespace('equipment-items', description='Equipment items management')
    ns_equipment_types = api.namespace('equipment-types', description='Equipment types management')
    ns_students = api.namespace('students', description='Student management')
    ns_masters = api.namespace('masters', description='Master management')
    ns_projects = api.namespace('projects', description='Project management')
    ns_suppliers = api.namespace('suppliers', description='Supplier management')
    ns_usage = api.namespace('usage', description='Equipment usage management')
    ns_reservations = api.namespace('reservations', description='Equipment reservations management')
    ns_repairments = api.namespace('repairments', description='Equipment repairments management')
    ns_health = api.namespace('health', description='System monitoring')
    
    # Authentication endpoints
    @ns_auth.route('/register')
    class Register(Resource):
        @api.expect(register_model)
        @api.marshal_with(message_response_model)
        def post(self):
            """Register new user"""
            data = request.get_json()
            username = data.get('username')
            
            if not username or not data.get('password') or not data.get('email'):
                api.abort(400, 'Username, password and email are required')
            
            if username in users_db:
                api.abort(400, f'User {username} already exists')
            
            users_db[username] = {
                'id': len(users_db) + 1,
                'username': username,
                'email': data.get('email'),
                'password': generate_password_hash(data.get('password')),
            }
            
            return {'message': f'User {username} registered successfully!'}, 201
    
    @ns_auth.route('/login')
    class Login(Resource):
        @api.expect(login_model)
        @api.marshal_with(token_response_model)
        def post(self):
            """Login and get JWT token"""
            data = request.get_json()
            username = data.get('username')
            password = data.get('password')
            
            user = users_db.get(username)
            if not user or not check_password_hash(user['password'], password):
                api.abort(401, 'Invalid credentials')
            
            token = jwt.encode({
                'username': username,
                'exp': datetime.utcnow() + timedelta(hours=24)
            }, app.config['SECRET_KEY'], algorithm='HS256')
            
            return {
                'token': token,
                'user': {
                    'id': user['id'],
                    'username': user['username'],
                    'email': user['email']
                },
                'message': 'Login successful!'
            }
    
    # Equipment endpoints
    @ns_equipment.route('/')
    class EquipmentList(Resource):
        @api.marshal_list_with(equipment_model)
        def get(self):
            """Get all equipment"""
            from my_project.auth.controller.orders.equipment_controller import EquipmentController
            try:
                controller = EquipmentController()
                equipment = controller.find_all()
                if equipment is None:
                    return []
                return [eq.put_into_dto() for eq in equipment]
            except Exception as e:
                print(f"Error getting equipment: {e}")
                return []
        
        @api.doc(security='Bearer')
        @token_required
        @api.expect(equipment_model)
        @api.marshal_with(equipment_model)
        def post(self):
            """Create new equipment"""
            from my_project.auth.controller.orders.equipment_controller import EquipmentController
            from my_project.auth.domain.orders.equipment import Equipment
            data = request.get_json()
            equipment = Equipment.create_from_dto(data)
            controller = EquipmentController()
            controller.create_equipment(equipment)
            return equipment.put_into_dto(), 201
    
    @ns_equipment.route('/<int:equipment_id>')
    class Equipment(Resource):
        @api.marshal_with(equipment_model)
        def get(self, equipment_id):
            """Get equipment by ID"""
            from my_project.auth.controller.orders.equipment_controller import EquipmentController
            try:
                controller = EquipmentController()
                equipment = controller.find_by_id(equipment_id)
                if not equipment:
                    api.abort(404, 'Equipment not found')
                return equipment.put_into_dto()
            except Exception as e:
                print(f"Error getting equipment {equipment_id}: {e}")
                api.abort(500, 'Internal server error')
        
        @api.doc(security='Bearer')
        @token_required
        @api.expect(equipment_model)
        @api.marshal_with(message_response_model)
        def put(self, equipment_id):
            """Update equipment by ID"""
            from my_project.auth.controller.orders.equipment_controller import EquipmentController
            from my_project.auth.domain.orders.equipment import Equipment
            data = request.get_json()
            equipment = Equipment.create_from_dto(data)
            controller = EquipmentController()
            controller.update_equipment(equipment_id, equipment)
            return {'message': 'Equipment updated successfully'}
        
        @api.doc(security='Bearer')
        @token_required
        @api.marshal_with(message_response_model)
        def delete(self, equipment_id):
            """Delete equipment by ID"""
            from my_project.auth.controller.orders.equipment_controller import EquipmentController
            controller = EquipmentController()
            controller.delete_equipment(equipment_id)
            return {'message': 'Equipment deleted successfully'}
    
    # Equipment Items endpoints
    @ns_equipment_items.route('/')
    class EquipmentItemsList(Resource):
        @api.marshal_list_with(equipment_item_model)
        def get(self):
            """Get all equipment items"""
            from my_project.auth.controller.orders.equipment_item_controller import EquipmentItemController
            try:
                controller = EquipmentItemController()
                items = controller.find_all()
                if items is None:
                    return []
                return [item.put_into_dto() for item in items]
            except Exception as e:
                print(f"Error getting equipment items: {e}")
                return []
        
        @api.doc(security='Bearer')
        @token_required
        @api.expect(equipment_item_model)
        @api.marshal_with(equipment_item_model)
        def post(self):
            """Create new equipment item"""
            from my_project.auth.controller.orders.equipment_item_controller import EquipmentItemController
            from my_project.auth.domain.orders.equipment_item import EquipmentItem
            data = request.get_json()
            item = EquipmentItem.create_from_dto(data)
            controller = EquipmentItemController()
            controller.create_equipment_item(item)
            return item.put_into_dto(), 201
    
    @ns_equipment_items.route('/<int:item_id>')
    class EquipmentItem(Resource):
        @api.marshal_with(equipment_item_model)
        def get(self, item_id):
            """Get equipment item by ID"""
            from my_project.auth.controller.orders.equipment_item_controller import EquipmentItemController
            try:
                controller = EquipmentItemController()
                item = controller.find_by_id(item_id)
                if not item:
                    api.abort(404, 'Equipment item not found')
                return item.put_into_dto()
            except Exception as e:
                print(f"Error getting equipment item {item_id}: {e}")
                api.abort(500, 'Internal server error')
    
    # Equipment Types endpoints
    @ns_equipment_types.route('/')
    class EquipmentTypesList(Resource):
        @api.marshal_list_with(equipment_type_model)
        def get(self):
            """Get all equipment types"""
            from my_project.auth.controller.orders.equipment_type_controller import EquipmentTypeController
            try:
                controller = EquipmentTypeController()
                types = controller.find_all()
                if types is None:
                    return []
                return [eq_type.put_into_dto() for eq_type in types]
            except Exception as e:
                print(f"Error getting equipment types: {e}")
                return []
        
        @api.doc(security='Bearer')
        @token_required
        @api.expect(equipment_type_model)
        @api.marshal_with(equipment_type_model)
        def post(self):
            """Create new equipment type"""
            from my_project.auth.controller.orders.equipment_type_controller import EquipmentTypeController
            from my_project.auth.domain.orders.equipment_type import EquipmentType
            data = request.get_json()
            eq_type = EquipmentType.create_from_dto(data)
            controller = EquipmentTypeController()
            controller.create_equipment_type(eq_type)
            return eq_type.put_into_dto(), 201
    
    # Students endpoints
    @ns_students.route('/')
    class StudentsList(Resource):
        @api.marshal_list_with(student_model)
        def get(self):
            """Get all students"""
            from my_project.auth.controller.orders.student_controller import StudentController
            try:
                controller = StudentController()
                students = controller.find_all()
                if students is None:
                    return []
                return [student.put_into_dto() for student in students]
            except Exception as e:
                print(f"Error getting students: {e}")
                return []
        
        @api.doc(security='Bearer')
        @token_required
        @api.expect(student_model)
        @api.marshal_with(student_model)
        def post(self):
            """Create new student"""
            from my_project.auth.controller.orders.student_controller import StudentController
            from my_project.auth.domain.orders.student import Student
            data = request.get_json()
            student = Student.create_from_dto(data)
            controller = StudentController()
            controller.create_student(student)
            return student.put_into_dto(), 201
    
    # Masters endpoints
    @ns_masters.route('/')
    class MastersList(Resource):
        @api.marshal_list_with(master_model)
        def get(self):
            """Get all masters"""
            from my_project.auth.controller.orders.masters_controller import MastersController
            try:
                controller = MastersController()
                masters = controller.find_all()
                if masters is None:
                    return []
                return [master.put_into_dto() for master in masters]
            except Exception as e:
                print(f"Error getting masters: {e}")
                return []
        
        @api.doc(security='Bearer')
        @token_required
        @api.expect(master_model)
        @api.marshal_with(master_model)
        def post(self):
            """Create new master"""
            from my_project.auth.controller.orders.masters_controller import MastersController
            from my_project.auth.domain.orders.masters import Masters
            data = request.get_json()
            master = Masters.create_from_dto(data)
            controller = MastersController()
            controller.create_master(master)
            return master.put_into_dto(), 201
    
    # Projects endpoints
    @ns_projects.route('/')
    class ProjectsList(Resource):
        @api.marshal_list_with(project_model)
        def get(self):
            """Get all projects"""
            from my_project.auth.controller.orders.projects_controller import ProjectsController
            try:
                controller = ProjectsController()
                projects = controller.find_all()
                if projects is None:
                    return []
                return [project.put_into_dto() for project in projects]
            except Exception as e:
                print(f"Error getting projects: {e}")
                return []
        
        @api.doc(security='Bearer')
        @token_required
        @api.expect(project_model)
        @api.marshal_with(project_model)
        def post(self):
            """Create new project"""
            from my_project.auth.controller.orders.projects_controller import ProjectsController
            from my_project.auth.domain.orders.projects import Projects
            data = request.get_json()
            project = Projects.create_from_dto(data)
            controller = ProjectsController()
            controller.create_project(project)
            return project.put_into_dto(), 201
    
    # Suppliers endpoints
    @ns_suppliers.route('/')
    class SuppliersList(Resource):
        @api.marshal_list_with(supplier_model)
        def get(self):
            """Get all suppliers"""
            from my_project.auth.controller.orders.suppliers_controller import SuppliersController
            try:
                controller = SuppliersController()
                suppliers = controller.find_all()
                if suppliers is None:
                    return []
                return [supplier.put_into_dto() for supplier in suppliers]
            except Exception as e:
                print(f"Error getting suppliers: {e}")
                return []
        
        @api.doc(security='Bearer')
        @token_required
        @api.expect(supplier_model)
        @api.marshal_with(supplier_model)
        def post(self):
            """Create new supplier"""
            from my_project.auth.controller.orders.suppliers_controller import SuppliersController
            from my_project.auth.domain.orders.suppliers import Suppliers
            data = request.get_json()
            supplier = Suppliers.create_from_dto(data)
            controller = SuppliersController()
            controller.create_supplier(supplier)
            return supplier.put_into_dto(), 201
    
    # Equipment Usage endpoints
    @ns_usage.route('/')
    class EquipmentUsageList(Resource):
        @api.marshal_list_with(equipment_usage_model)
        def get(self):
            """Get all equipment usage records"""
            from my_project.auth.controller.orders.equipment_usage_controller import EquipmentUsageController
            try:
                controller = EquipmentUsageController()
                usage = controller.find_all()
                if usage is None:
                    return []
                return [record.put_into_dto() for record in usage]
            except Exception as e:
                print(f"Error getting equipment usage: {e}")
                return []
        
        @api.doc(security='Bearer')
        @token_required
        @api.expect(equipment_usage_model)
        @api.marshal_with(equipment_usage_model)
        def post(self):
            """Create new equipment usage record"""
            from my_project.auth.controller.orders.equipment_usage_controller import EquipmentUsageController
            from my_project.auth.domain.orders.equipment_usage import EquipmentUsage
            data = request.get_json()
            usage = EquipmentUsage.create_from_dto(data)
            controller = EquipmentUsageController()
            controller.create_equipment_usage(usage)
            return usage.put_into_dto(), 201
    
    # Equipment Reservations endpoints
    @ns_reservations.route('/')
    class EquipmentReservationsList(Resource):
        @api.marshal_list_with(equipment_reservation_model)
        def get(self):
            """Get all equipment reservations"""
            from my_project.auth.controller.orders.equipment_reservation_controller import EquipmentReservationController
            try:
                controller = EquipmentReservationController()
                reservations = controller.find_all()
                if reservations is None:
                    return []
                return [reservation.put_into_dto() for reservation in reservations]
            except Exception as e:
                print(f"Error getting equipment reservations: {e}")
                return []
        
        @api.doc(security='Bearer')
        @token_required
        @api.expect(equipment_reservation_model)
        @api.marshal_with(equipment_reservation_model)
        def post(self):
            """Create new equipment reservation"""
            from my_project.auth.controller.orders.equipment_reservation_controller import EquipmentReservationController
            from my_project.auth.domain.orders.equipment_reservation import EquipmentReservation
            data = request.get_json()
            reservation = EquipmentReservation.create_from_dto(data)
            controller = EquipmentReservationController()
            controller.create_equipment_reservation(reservation)
            return reservation.put_into_dto(), 201
    
    # Repairments endpoints
    @ns_repairments.route('/')
    class RepairmentsList(Resource):
        @api.marshal_list_with(repairment_model)
        def get(self):
            """Get all equipment repairments"""
            from my_project.auth.controller.orders.repairment_controller import RepairmentController
            try:
                controller = RepairmentController()
                repairments = controller.find_all()
                if repairments is None:
                    return []
                return [repairment.put_into_dto() for repairment in repairments]
            except Exception as e:
                print(f"Error getting equipment repairments: {e}")
                return []
        
        @api.doc(security='Bearer')
        @token_required
        @api.expect(repairment_model)
        @api.marshal_with(repairment_model)
        def post(self):
            """Create new equipment repairment"""
            from my_project.auth.controller.orders.repairment_controller import RepairmentController
            from my_project.auth.domain.orders.repairment import Repairment
            data = request.get_json()
            repairment = Repairment.create_from_dto(data)
            controller = RepairmentController()
            controller.create_repairment(repairment)
            return repairment.put_into_dto(), 201
    
    # Health check endpoint
    @ns_health.route('/status')
    class HealthCheck(Resource):
        @api.marshal_with(health_model)
        def get(self):
            """System health check"""
            return {
                'status': 'healthy',
                'message': 'Equipment Management System API is running!',
                'version': '1.0',
                'database': 'connected',
                'timestamp': datetime.utcnow().isoformat()
            }
    
    # Root endpoint
    @app.route("/")
    def hello_world():
        return jsonify({
            'message': 'Welcome to Equipment Management System API!',
            'docs_url': '/api/docs/',
            'api_version': '1.0',
            'features': [
                'JWT Authentication',
                'Equipment Management',
                'Student Management',
                'Project Management',
                'Reservation System',
                'Usage Tracking',
                'Repairment Management',
                'Real-time Statistics'
            ],
            'endpoints': {
                'authentication': {
                    'login': '/api/v1/auth/login',
                    'register': '/api/v1/auth/register'
                },
                'equipment': {
                    'list': '/api/v1/equipment/',
                    'by_id': '/api/v1/equipment/{id}'
                },
                'equipment_items': {
                    'list': '/api/v1/equipment-items/',
                    'by_id': '/api/v1/equipment-items/{id}'
                },
                'equipment_types': {
                    'list': '/api/v1/equipment-types/',
                    'by_id': '/api/v1/equipment-types/{id}'
                },
                'students': {
                    'list': '/api/v1/students/',
                    'by_id': '/api/v1/students/{id}'
                },
                'masters': {
                    'list': '/api/v1/masters/',
                    'by_id': '/api/v1/masters/{id}'
                },
                'projects': {
                    'list': '/api/v1/projects/',
                    'by_id': '/api/v1/projects/{id}'
                },
                'suppliers': {
                    'list': '/api/v1/suppliers/',
                    'by_id': '/api/v1/suppliers/{id}'
                },
                'usage': {
                    'list': '/api/v1/usage/',
                    'by_id': '/api/v1/usage/{id}'
                },
                'reservations': {
                    'list': '/api/v1/reservations/',
                    'by_id': '/api/v1/reservations/{id}'
                },
                'repairments': {
                    'list': '/api/v1/repairments/',
                    'by_id': '/api/v1/repairments/{id}'
                },
                'system': {
                    'health': '/api/v1/health/status'
                }
            },
            'test_credentials': {
                'admin': {'username': 'admin', 'password': 'admin123'},
                'user': {'username': 'user', 'password': 'user123'}
            },
            'instructions': [
                '1. Visit /api/docs/ for interactive API documentation',
                '2. Login with test credentials to get JWT token',
                '3. Use "Bearer <token>" in Authorization header for protected endpoints',
                '4. Admin users have access to all management features'
            ]
        })


def _init_db(app: Flask) -> None:
    """
    Initializes DB with SQLAlchemy
    :param app: Flask application object
    """
    app.config.setdefault("SQLALCHEMY_ENGINE_OPTIONS", {})

    db.init_app(app)

    if not database_exists(app.config["SQLALCHEMY_DATABASE_URI"]):
        create_database(app.config["SQLALCHEMY_DATABASE_URI"])

    import my_project.auth.domain
    with app.app_context():
        db.create_all()


def _process_input_config(app_config: Dict[str, Any], additional_config: Dict[str, Any]) -> None:
    """
    Processes input configuration
    :param app_config: Flask configuration
    :param additional_config: additional configuration
    """
    load_dotenv()
    conn = os.getenv(SQLALCHEMY_DATABASE_URI)
    if conn:
        app_config["SQLALCHEMY_DATABASE_URI"] = conn
        return

    user = os.getenv(MYSQL_ROOT_USER, str(additional_config.get("MYSQL_ROOT_USER", "")))
    pwd  = os.getenv(MYSQL_ROOT_PASSWORD, str(additional_config.get("MYSQL_ROOT_PASSWORD", "")))

    template = app_config.get("SQLALCHEMY_DATABASE_URI", "")
    if not template:
        raise ValueError("SQLALCHEMY_DATABASE_URI is missing and no CONNECTION_STRING provided in env.")

    if "{user}" in template or "{password}" in template:
        app_config["SQLALCHEMY_DATABASE_URI"] = template.format(
            user=user,
            password=quote_plus(pwd),
        )
        return

    if "{}" in template:
        app_config["SQLALCHEMY_DATABASE_URI"] = template.format(
            user, quote_plus(pwd)
        )
        return

    app_config["SQLALCHEMY_DATABASE_URI"] = template
